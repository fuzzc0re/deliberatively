{"version":3,"sources":["contract/constants.ts","contract/utils.ts","components/styled/TextField.tsx","context/InitVoteMarket.tsx","hooks/useInitVoteMarketContext.ts","components/textfields/Participants.tsx","components/textfields/NumberOfDays.tsx","components/textfields/MaximumNumberOfRepresentatives.tsx","contract/instructions/initVoteMarket.ts","components/buttons/Mint.tsx","routes/Mint.tsx"],"names":["Key","Instruction","DELIBERATIVELY_PROGRAM_ID","PublicKey","Buffer","from","initVoteMarketMintTransactions","connection","publicKey","a","getBalance","balance","console","log","toBase58","LAMPORTS_PER_SOL","requestAirdrop","airdropSignature","confirmTransaction","newBalance","mintAccount","Keypair","generate","initializerTokenAccount","mintSize","MintLayout","span","accountSize","AccountLayout","getMinimumBalanceForRentExemption","mintRent","accountRent","transaction","Transaction","getRecentBlockhash","recentBlockhash","blockhash","add","SystemProgram","createAccount","fromPubkey","newAccountPubkey","lamports","space","programId","TOKEN_PROGRAM_ID","createWithSeed","deliberativelyMintDerivedAccountPubkey","createAccountWithSeed","basePubkey","seed","mintAccountPublicKeyString","toString","slice","length","initializerMintDerivedAccountPubkey","findProgramAddress","toBuffer","pda","Token","createInitMintInstruction","createInitAccountInstruction","StyledTextField","styled","TextField","userSelect","initVoteMarketContextDefaults","numberOfParticipants","maximumNumberOfRepresentatives","numberOfDays","minimumContributionRequiredFromParticipant","setNumberOfParticipants","participants","setMaximumNumberOfRepresentatives","representatives","setNumberOfDays","days","setMinimumContributionRequiredFromParticipant","contribution","InitVoteMarketContext","createContext","InitVoteMarketContextProvider","children","useState","Provider","value","useInitVoteMarketContext","useContext","TextFieldParticipants","noOfParticipants","setNoOfParticipants","variant","id","type","inputProps","inputMode","pattern","label","InputLabelProps","shrink","helperText","InputProps","min","max","onChange","e","target","number","input","replace","Number","Math","round","TextFieldNumberOfDays","noOfDays","setNoOfDays","TextFieldMaximumNumberOfRepresentatives","noOfRepresentatives","setNoOfRepresentatives","InitVoteMarketInstructionData","fields","instruction","InitVoteMarket","Struct","SOLANA_SCHEMA","set","kind","initVoteMarket","sendTransaction","args","newVoteMarketInstructionData","instructionBuffer","encode","initMintInstruction","TransactionInstruction","keys","pubkey","isSigner","isWritable","SYSVAR_RENT_PUBKEY","data","feePayer","signers","partialSign","instructionTransactionSignature","mintAccountPublicKey","initializerTokenAccountPublicKey","MintTokenButton","useConnection","useWallet","connected","wallet","history","useHistory","useMemo","handleClick","useCallback","sha256","hash","newVoteMarket","address","maxRepresentatives","startDate","Date","now","stopDate","ownTokenAddress","alternatives","setVoteMarket","push","disableRipple","onClick","StyledGrid","Grid","theme","padding","spacing","marginTop","marginLeft","backgroundColor","palette","background","paper","StyledBottomGrid","textAlign","justifyContent","Mint","container","rowSpacing","xs","sm","md","columnSpacing","columns","direction","item"],"mappings":"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","file":"static/js/4.62a5300e.chunk.js","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\n\nexport const DELIBERATIVELY_PROGRAM_ID = new PublicKey(\"A1PS1vg9pR86X2NnS8EmBsb3z6mekL6myZ2XNXpGuzYp\");\nexport const DELIBERATIVELY_SEED: Buffer[] = [Buffer.from(\"deliberatively\", \"utf8\")];\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID: PublicKey = new PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nexport enum Key {\n  Uninitialized,\n  VoteMarket,\n  VoteParticipant,\n  VoteAlternative,\n}\n\nexport enum Instruction {\n  InitVoteMarket = 0,\n}\n","import { MintLayout, AccountLayout, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Keypair, Signer, Connection, PublicKey, SystemProgram, Transaction, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { DELIBERATIVELY_PROGRAM_ID } from \"./constants\";\n\nexport const checkProgram = async (connection: Connection): Promise<void> => {\n  const programInfo = await connection.getAccountInfo(DELIBERATIVELY_PROGRAM_ID);\n  if (programInfo === null) {\n    throw new Error(\"Program does not exist in specified address\");\n  } else if (!programInfo.executable) {\n    throw new Error(\"Program is not executable\");\n  }\n};\n\nexport const calculateCost = async (connection: Connection, SIZE: number): Promise<number> => {\n  let cost = 0;\n  const { feeCalculator } = await connection.getRecentBlockhash();\n\n  // Calculate the cost to fund the account\n  cost += await connection.getMinimumBalanceForRentExemption(SIZE);\n\n  // Calculate the cost of sending transactions\n  cost += feeCalculator.lamportsPerSignature * 100; // wag\n\n  return cost;\n};\n\nexport const fundsRequired = async (connection: Connection, publicKey: PublicKey, SIZE: number): Promise<number> => {\n  const cost = await calculateCost(connection, SIZE);\n  const balance = await connection.getBalance(publicKey);\n\n  if (cost > balance) {\n    return cost - balance;\n  } else {\n    return 0;\n  }\n};\n\ninterface IMintVoteMarketTransactions {\n  transaction: Transaction;\n  deliberativelyMintDerivedAccountPubkey: PublicKey;\n  initializerMintDerivedAccountPubkey: PublicKey;\n  initializerTokenAccount: Signer;\n  mintAccount: Signer;\n  pda: PublicKey;\n}\n\nexport const initVoteMarketMintTransactions = async (\n  connection: Connection,\n  publicKey: PublicKey\n): Promise<IMintVoteMarketTransactions> => {\n  try {\n    const balance = await connection.getBalance(publicKey);\n    console.log(\"Address \" + publicKey.toBase58() + \" has balance \" + balance);\n\n    if (balance < LAMPORTS_PER_SOL) {\n      console.log(\"Airdrop to the rescue since balance < 1 SOL\");\n      const airdropSignature = await connection.requestAirdrop(publicKey, 10 * LAMPORTS_PER_SOL); // 1 SOL\n      await connection.confirmTransaction(airdropSignature);\n      const newBalance = await connection.getBalance(publicKey);\n      console.log(\"New balance for address \" + publicKey.toBase58() + \" is \" + newBalance);\n    }\n\n    const mintAccount = Keypair.generate();\n    const initializerTokenAccount = Keypair.generate();\n\n    const mintSize = MintLayout.span;\n    const accountSize = AccountLayout.span;\n\n    // TODO ask solana/web3.js for custom account size\n\n    const mintRent = await connection.getMinimumBalanceForRentExemption(mintSize);\n    const accountRent = await connection.getMinimumBalanceForRentExemption(accountSize);\n\n    const transaction = new Transaction();\n    transaction.recentBlockhash = (await connection.getRecentBlockhash(\"max\")).blockhash;\n\n    // PublicKey creates the mint account.\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: publicKey,\n        newAccountPubkey: mintAccount.publicKey,\n        lamports: mintRent,\n        space: mintSize, // MintLayout.span but we need to only store the Pubkey of token holder.\n        programId: TOKEN_PROGRAM_ID,\n      })\n    );\n\n    // PublicKey creates associated account that will hold 1 vote token.\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: publicKey,\n        newAccountPubkey: initializerTokenAccount.publicKey,\n        lamports: accountRent,\n        space: accountSize, // AccountLayout.span but we need that space specifically\n        programId: TOKEN_PROGRAM_ID,\n        // programId: DELIBERATIVELY_PROGRAM_ID,\n      })\n    );\n\n    // Create account with seed for DELIBERATIVELY_PROGRAM_ID\n    // Deliberatively will use this to write vote market data\n    const deliberativelyMintDerivedAccountPubkey = await PublicKey.createWithSeed(\n      mintAccount.publicKey,\n      \"deliberatively\",\n      DELIBERATIVELY_PROGRAM_ID\n    );\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: publicKey,\n        newAccountPubkey: deliberativelyMintDerivedAccountPubkey,\n        basePubkey: mintAccount.publicKey,\n        seed: \"deliberatively\",\n        lamports: accountRent,\n        space: accountSize,\n        programId: DELIBERATIVELY_PROGRAM_ID,\n      })\n    );\n\n    // Create account with seed for initializer\n    // Deliberatively will use this to write vote market participant data\n    const mintAccountPublicKeyString = mintAccount.publicKey.toString();\n    const initializerMintDerivedAccountPubkey = await PublicKey.createWithSeed(\n      publicKey,\n      \"deliberatively\" + mintAccountPublicKeyString.slice(mintAccountPublicKeyString.length - 8),\n      DELIBERATIVELY_PROGRAM_ID\n    );\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: publicKey,\n        newAccountPubkey: initializerMintDerivedAccountPubkey,\n        basePubkey: publicKey,\n        seed: \"deliberatively\" + mintAccountPublicKeyString.slice(mintAccountPublicKeyString.length - 8),\n        lamports: accountRent,\n        space: accountSize,\n        programId: DELIBERATIVELY_PROGRAM_ID,\n      })\n    );\n\n    const pda = await PublicKey.findProgramAddress(\n      [Buffer.from(\"deliberatively\", \"utf8\"), mintAccount.publicKey.toBuffer()],\n      DELIBERATIVELY_PROGRAM_ID\n    );\n    // PDA becomes mint authority.\n    transaction.add(\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mintAccount.publicKey,\n        2, // decimals\n        pda[0], // Mint authority\n        pda[0] // Freeze authority\n      )\n    );\n\n    // Publickey initializes its account\n    transaction.add(\n      Token.createInitAccountInstruction(\n        TOKEN_PROGRAM_ID,\n        mintAccount.publicKey,\n        initializerTokenAccount.publicKey,\n        publicKey\n      )\n    );\n\n    return {\n      transaction,\n      deliberativelyMintDerivedAccountPubkey,\n      initializerMintDerivedAccountPubkey,\n      initializerTokenAccount,\n      mintAccount,\n      pda: pda[0],\n    };\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\n\n// const findBufferLength = (s: string) => {\n//   const buffer = Buffer.from(s, \"utf8\");\n//   return buffer.length;\n// };\n\n// interface SanitizedVoteMarketStringInputs {\n//   sanitizedIdentifierText: string;\n//   sanitizedKeyword: string;\n// }\n\n// export const sanitizeInitVoteMarketStringInputs = (\n//   identifierText: string,\n//   keyword: string\n// ): SanitizedVoteMarketStringInputs => {\n//   const identifierBufferLength = findBufferLength(identifierText);\n//   let it = identifierText;\n//   if (identifierBufferLength < 24) {\n//     for (let i = 0; i < 24; i++) {\n//       it += \"0\";\n//       if (findBufferLength(it) === 24) {\n//         break;\n//       }\n//     }\n//   } else if (identifierBufferLength > 24) {\n//     throw new Error(\"Larger than 24\");\n//   }\n//\n//   const keywordBufferLength = findBufferLength(keyword);\n//   let kw = keyword;\n//   if (keywordBufferLength < 36) {\n//     for (let j = 0; j < 36; j++) {\n//       kw += \"0\";\n//       if (findBufferLength(kw) === 36) {\n//         break;\n//       }\n//     }\n//   } else if (keywordBufferLength > 36) {\n//     throw new Error(\"Larger than 36\");\n//   }\n//\n//   return { sanitizedIdentifierText: it, sanitizedKeyword: kw };\n// };\n","import { TextField } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\n\nexport const StyledTextField = styled(TextField)(() => ({\n  userSelect: \"none\",\n  // padding: theme.spacing(3),\n}));\n","import { FC, createContext, useState } from \"react\";\n\nimport { InitVoteMarketArgs } from \"../contract/instructions/initVoteMarket\";\n\ninterface IInitVoteMarketContext extends InitVoteMarketArgs {\n  // setIdentifierText: (text: string) => void;\n  setNumberOfParticipants: (participants: number) => void;\n  // setRebalancingCost: (cost: number) => void;\n  setMaximumNumberOfRepresentatives: (representatives: number) => void;\n  setNumberOfDays: (days: number) => void;\n  setMinimumContributionRequiredFromParticipant: (contribution: number) => void;\n  // setKeyword: (keyword: string) => void;\n}\n\nconst initVoteMarketContextDefaults: IInitVoteMarketContext = {\n  // identifierText: \"\",\n  numberOfParticipants: 5,\n  // rebalancingCost: 0.01,\n  maximumNumberOfRepresentatives: 2,\n  numberOfDays: 1,\n  minimumContributionRequiredFromParticipant: 0.1,\n  // keyword: \"secret\",\n  // setIdentifierText: (text: string) => {\n  //   console.log(text);\n  //   return;\n  // },\n  setNumberOfParticipants: (participants: number) => {\n    console.log(participants);\n    return;\n  },\n  // setRebalancingCost: (cost: number) => {\n  //   console.log(cost);\n  //   return;\n  // },\n  setMaximumNumberOfRepresentatives: (representatives: number) => {\n    console.log(representatives);\n    return;\n  },\n  setNumberOfDays: (days: number) => {\n    console.log(days);\n    return;\n  },\n  setMinimumContributionRequiredFromParticipant: (contribution: number) => {\n    console.log(contribution);\n    return;\n  },\n  // setKeyword: (keyword: string) => {\n  //   console.log(keyword);\n  //   return;\n  // },\n};\n\nexport const InitVoteMarketContext = createContext<IInitVoteMarketContext>(initVoteMarketContextDefaults);\n\nexport const InitVoteMarketContextProvider: FC = ({ children }) => {\n  // const [identifierText, setIdentifierText] = useState(\"Some identifier text\");\n  const [numberOfParticipants, setNumberOfParticipants] = useState(5);\n  // const [rebalancingCost, setRebalancingCost] = useState(0.01);\n  const [maximumNumberOfRepresentatives, setMaximumNumberOfRepresentatives] = useState(2);\n  const [numberOfDays, setNumberOfDays] = useState(1);\n  const [minimumContributionRequiredFromParticipant, setMinimumContributionRequiredFromParticipant] = useState(0.1);\n  // const [keyword, setKeyword] = useState(\"secret\");\n\n  return (\n    <InitVoteMarketContext.Provider\n      value={{\n        // identifierText,\n        numberOfParticipants,\n        // rebalancingCost,\n        maximumNumberOfRepresentatives,\n        numberOfDays,\n        minimumContributionRequiredFromParticipant,\n        // keyword,\n        // setIdentifierText,\n        setNumberOfParticipants,\n        // setRebalancingCost,\n        setMaximumNumberOfRepresentatives,\n        setNumberOfDays,\n        setMinimumContributionRequiredFromParticipant,\n        // setKeyword,\n      }}\n    >\n      {children}\n    </InitVoteMarketContext.Provider>\n  );\n};\n","import { useContext } from \"react\";\n\nimport { InitVoteMarketContext } from \"../context/InitVoteMarket\";\n\n// hook to access global state\n// eslint-disable-next-line\nexport const useInitVoteMarketContext = () => useContext(InitVoteMarketContext);\n// like: const { theme } = useVoteContext();\n","import { FC, useState, ChangeEvent } from \"react\";\n\nimport { StyledTextField } from \"../styled/TextField\";\n\nimport { useInitVoteMarketContext } from \"../../hooks/useInitVoteMarketContext\";\n\nexport const TextFieldParticipants: FC = () => {\n  const { setNumberOfParticipants } = useInitVoteMarketContext();\n  const [noOfParticipants, setNoOfParticipants] = useState(5);\n  const handleNoOfParticipantsChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e && e.target && e.target.value) {\n      let number: number;\n      const input = e.target.value.replace(/\\D/g, \"\");\n      if (input === \"\") {\n        number = 5;\n      }\n      number = Number(input);\n      if (number < 5) {\n        number = 5;\n      } else if (number <= 10000000000) {\n        number = Math.round(number);\n      } else {\n        number = 10000000000;\n      }\n      setNoOfParticipants(number);\n      setNumberOfParticipants(number);\n    }\n  };\n\n  return (\n    <StyledTextField\n      variant=\"outlined\"\n      id=\"no_of_participants_textfield\"\n      type=\"number\"\n      inputProps={{ inputMode: \"numeric\", pattern: \"[0-9]*\" }}\n      label=\"Participants\"\n      InputLabelProps={{\n        shrink: true,\n      }}\n      // size=\"small\"\n      helperText=\"Equals to maximum issued tokens\"\n      InputProps={{ inputProps: { min: 5, max: 10000000000 } }}\n      value={noOfParticipants}\n      onChange={handleNoOfParticipantsChange}\n    />\n  );\n};\n","import { FC, useState, ChangeEvent } from \"react\";\n\nimport { StyledTextField } from \"../styled/TextField\";\n\nimport { useInitVoteMarketContext } from \"../../hooks/useInitVoteMarketContext\";\n\nexport const TextFieldNumberOfDays: FC = () => {\n  const { setNumberOfDays } = useInitVoteMarketContext();\n  const [noOfDays, setNoOfDays] = useState(1);\n  const handleNoOfDaysChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e && e.target && e.target.value) {\n      let number: number;\n      const input = e.target.value.replace(/\\D/g, \"\");\n      if (input === \"\") {\n        number = 1;\n      }\n      number = Number(input);\n      if (number < 1) {\n        number = 1;\n      } else if (number <= 10000) {\n        number = Math.round(number);\n      } else {\n        number = 10000;\n      }\n      setNoOfDays(number);\n      setNumberOfDays(number);\n    }\n  };\n\n  return (\n    <StyledTextField\n      variant=\"outlined\"\n      id=\"no_of_days_textfield\"\n      type=\"number\"\n      inputProps={{ inputMode: \"numeric\", pattern: \"[0-9]*\" }}\n      label=\"Number of days\"\n      InputLabelProps={{\n        shrink: true,\n      }}\n      helperText=\"Representatives can start proposing alternatives afterwards\"\n      InputProps={{ inputProps: { min: 1, max: 10000 } }}\n      value={noOfDays}\n      onChange={handleNoOfDaysChange}\n    />\n  );\n};\n","import { FC, useState, ChangeEvent } from \"react\";\n\nimport { StyledTextField } from \"../styled/TextField\";\n\nimport { useInitVoteMarketContext } from \"../../hooks/useInitVoteMarketContext\";\n\nexport const TextFieldMaximumNumberOfRepresentatives: FC = () => {\n  const { numberOfParticipants, setMaximumNumberOfRepresentatives } = useInitVoteMarketContext();\n  const [noOfRepresentatives, setNoOfRepresentatives] = useState(2);\n  const handleNoOfRepresentativesChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e && e.target && e.target.value) {\n      let number: number;\n      const input = e.target.value.replace(/\\D/g, \"\");\n      if (input === \"\") {\n        number = 2;\n      }\n      number = Number(input);\n      if (number < 2) {\n        number = 2;\n      } else if (number > numberOfParticipants) {\n        number = Math.round(numberOfParticipants / 5);\n      }\n      setNoOfRepresentatives(number);\n      setMaximumNumberOfRepresentatives(number);\n    }\n  };\n\n  return (\n    <StyledTextField\n      variant=\"outlined\"\n      id=\"no_of_representatives_textfield\"\n      type=\"number\"\n      inputProps={{ inputMode: \"numeric\", pattern: \"[0-9]*\" }}\n      label=\"Maximum number of representatives\"\n      InputLabelProps={{\n        shrink: true,\n      }}\n      helperText=\"Representatives need to have at least power > 1\"\n      InputProps={{ inputProps: { min: 2, max: Math.round(numberOfParticipants / 5) } }}\n      value={noOfRepresentatives}\n      onChange={handleNoOfRepresentativesChange}\n    />\n  );\n};\n","import { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  Connection,\n  PublicKey,\n  Signer,\n  SYSVAR_RENT_PUBKEY,\n  Transaction,\n  TransactionInstruction,\n  Struct,\n  SOLANA_SCHEMA,\n} from \"@solana/web3.js\";\n\nimport { initVoteMarketMintTransactions } from \"../utils\";\n\nimport { DELIBERATIVELY_PROGRAM_ID, Instruction } from \"../constants\";\n\nexport interface InitVoteMarketArgs {\n  /// Number of participants == number of minted tokens\n  numberOfParticipants: number;\n  /// With each transaction, the participant burns a percentage of voting power.\n  /// From 1 to 100.\n  // rebalancingCost: number;\n  /// The participants that have accumulated the most voting power and therefore can propose alternatives.\n  maximumNumberOfRepresentatives: number;\n  /// Date of the request + number_of_days gives us the unix timestamp of end date.\n  numberOfDays: number;\n  /// If > 0 then a participant needs to lock this amount of tokens to the vote market.\n  minimumContributionRequiredFromParticipant: number;\n}\n\nclass InitVoteMarketInstructionData extends Struct {\n  instruction = Instruction.InitVoteMarket;\n  numberOfParticipants = 5;\n  // rebalancingCost = 0.01;\n  maximumNumberOfRepresentatives = 2;\n  numberOfDays = 1;\n  minimumContributionRequiredFromParticipant = 1000; // lamports\n  constructor(fields: InitVoteMarketArgs) {\n    super(fields);\n    this.instruction = Instruction.InitVoteMarket;\n    this.numberOfParticipants = fields.numberOfParticipants;\n    // this.rebalancingCost = fields.rebalancingCost;\n    this.maximumNumberOfRepresentatives = fields.maximumNumberOfRepresentatives;\n    this.numberOfDays = fields.numberOfDays;\n    this.minimumContributionRequiredFromParticipant = fields.minimumContributionRequiredFromParticipant;\n  }\n}\n\nSOLANA_SCHEMA.set(InitVoteMarketInstructionData, {\n  kind: \"struct\",\n  fields: [\n    [\"instruction\", \"u8\"],\n    [\"numberOfParticipants\", \"u32\"],\n    // [\"rebalancingCost\", \"u8\"],\n    [\"maximumNumberOfRepresentatives\", \"u32\"],\n    [\"numberOfDays\", \"u16\"],\n    [\"minimumContributionRequiredFromParticipant\", \"u32\"],\n  ],\n});\n\ninterface IInitVoteMarketReturn {\n  mintAccountPublicKey: PublicKey;\n  initializerTokenAccountPublicKey: PublicKey;\n  pda: PublicKey;\n}\n\nexport const initVoteMarket = async (\n  connection: Connection,\n  publicKey: PublicKey,\n  sendTransaction: (transaction: Transaction, connection: Connection) => Promise<string>,\n  args: InitVoteMarketArgs\n): Promise<IInitVoteMarketReturn> => {\n  const {\n    transaction,\n    deliberativelyMintDerivedAccountPubkey,\n    initializerMintDerivedAccountPubkey,\n    initializerTokenAccount,\n    mintAccount,\n    pda,\n  } = await initVoteMarketMintTransactions(connection, publicKey);\n\n  // const { sanitizedIdentifierText, sanitizedKeyword } = sanitizeInitVoteMarketStringInputs(\n  //   args.identifierText,\n  //   args.keyword\n  // );\n\n  const newVoteMarketInstructionData = new InitVoteMarketInstructionData({\n    numberOfParticipants: args.numberOfParticipants,\n    // rebalancingCost: args.rebalancingCost,\n    maximumNumberOfRepresentatives: args.maximumNumberOfRepresentatives,\n    numberOfDays: args.numberOfDays,\n    minimumContributionRequiredFromParticipant: args.minimumContributionRequiredFromParticipant,\n  });\n\n  const instructionBuffer = newVoteMarketInstructionData.encode();\n\n  const initMintInstruction = new TransactionInstruction({\n    programId: DELIBERATIVELY_PROGRAM_ID,\n    keys: [\n      { pubkey: publicKey, isSigner: true, isWritable: false },\n      { pubkey: mintAccount.publicKey, isSigner: false, isWritable: false },\n      { pubkey: deliberativelyMintDerivedAccountPubkey, isSigner: false, isWritable: true },\n      // { pubkey: tokenHolderAccount.publicKey, isSigner: false, isWritable: true },\n      { pubkey: initializerMintDerivedAccountPubkey, isSigner: false, isWritable: true },\n      { pubkey: initializerTokenAccount.publicKey, isSigner: false, isWritable: false },\n      { pubkey: pda, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ],\n    data: instructionBuffer,\n  });\n\n  transaction.add(initMintInstruction);\n\n  transaction.feePayer = publicKey;\n  const signers: Signer[] = [mintAccount, initializerTokenAccount];\n  transaction.partialSign(...signers);\n\n  const instructionTransactionSignature = await sendTransaction(transaction, connection);\n  await connection.confirmTransaction(instructionTransactionSignature, \"processed\");\n\n  return {\n    mintAccountPublicKey: mintAccount.publicKey,\n    initializerTokenAccountPublicKey: initializerTokenAccount.publicKey,\n    pda: pda,\n  };\n};\n","import { FC, useMemo, useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\n\nimport { initVoteMarket, InitVoteMarketArgs } from \"../../contract/instructions/initVoteMarket\";\n\nimport { IVoteMarket, setVoteMarket } from \"../../models/VoteMarket\";\nimport { sha256 } from \"../../utils/db\";\n\nimport { useInitVoteMarketContext } from \"../../hooks/useInitVoteMarketContext\";\n\nimport { StyledButton } from \"../styled/Button\";\n\nexport const MintTokenButton: FC = () => {\n  const {\n    // identifierText,\n    numberOfParticipants,\n    // rebalancingCost,\n    numberOfDays,\n    // keyword,\n    maximumNumberOfRepresentatives,\n    minimumContributionRequiredFromParticipant,\n  } = useInitVoteMarketContext();\n  const { connection } = useConnection();\n  const { connected, wallet, publicKey, sendTransaction } = useWallet();\n  const history = useHistory();\n\n  const args: InitVoteMarketArgs = useMemo(\n    () => ({\n      // identifierText,\n      numberOfParticipants,\n      // rebalancingCost,\n      numberOfDays,\n      maximumNumberOfRepresentatives,\n      minimumContributionRequiredFromParticipant,\n      // keyword,\n    }),\n    [\n      // identifierText,\n      numberOfParticipants,\n      // rebalancingCost,\n      numberOfDays,\n      maximumNumberOfRepresentatives,\n      minimumContributionRequiredFromParticipant,\n      // keyword,\n    ]\n  );\n\n  const handleClick = useCallback(async () => {\n    if (!connected || !wallet || !publicKey) {\n      console.log(\"No wallet found\");\n      return;\n    }\n\n    try {\n      const { mintAccountPublicKey, initializerTokenAccountPublicKey, pda } = await initVoteMarket(\n        connection,\n        publicKey,\n        // signTransaction,\n        sendTransaction,\n        args\n      );\n\n      const hash = await sha256(mintAccountPublicKey.toString());\n\n      // if this succeeds then\n      const newVoteMarket: IVoteMarket = {\n        address: mintAccountPublicKey.toString(),\n        hash,\n        numberOfParticipants,\n        minimumContributionRequiredFromParticipant,\n        maxRepresentatives: maximumNumberOfRepresentatives,\n        startDate: Date.now(),\n        stopDate: Date.now() + 1000 * 60 * 60 * 24 * numberOfDays,\n        pda: pda.toString(),\n        ownTokenAddress: initializerTokenAccountPublicKey.toString(),\n        participants: [],\n        alternatives: [],\n      };\n      await setVoteMarket(newVoteMarket);\n      history.push(`/market/${mintAccountPublicKey.toString()}`);\n    } catch (error) {\n      console.log(error);\n    }\n  }, [connected, wallet, publicKey]);\n\n  return (\n    <StyledButton disableRipple onClick={handleClick}>\n      MINT\n    </StyledButton>\n  );\n};\n","import { FC } from \"react\";\nimport { Grid } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\n\nimport { TextFieldParticipants } from \"../components/textfields/Participants\";\nimport { TextFieldNumberOfDays } from \"../components/textfields/NumberOfDays\";\nimport { TextFieldMaximumNumberOfRepresentatives } from \"../components/textfields/MaximumNumberOfRepresentatives\";\n\nimport { MintTokenButton } from \"../components/buttons/Mint\";\n\n// import { copyrightHeight, toolbarHeight } from \"../utils/constants\";\n\nimport { InitVoteMarketContextProvider } from \"../context/InitVoteMarket\";\n\nconst StyledGrid = styled(Grid)(({ theme }) => ({\n  padding: theme.spacing(2),\n  marginTop: theme.spacing(2),\n  marginLeft: theme.spacing(3),\n  backgroundColor: theme.palette.background.paper,\n}));\n\nconst StyledBottomGrid = styled(Grid)(({ theme }) => ({\n  padding: theme.spacing(3),\n  textAlign: \"center\",\n  justifyContent: \"space-evenly\",\n}));\n\nconst Mint: FC = () => {\n  return (\n    <InitVoteMarketContextProvider>\n      <StyledGrid\n        container\n        rowSpacing={{ xs: 2, sm: 3, md: 4 }}\n        columnSpacing={{ xs: 2, sm: 3, md: 4 }}\n        columns={{ xs: 1, sm: 4, md: 8 }}\n        direction={{ xs: \"column\", sm: \"row\" }}\n      >\n        <StyledGrid item xs={1} sm={4} md={8}>\n          <TextFieldParticipants />\n        </StyledGrid>\n\n        <StyledGrid item xs={1} sm={4} md={8}>\n          <TextFieldNumberOfDays />\n        </StyledGrid>\n\n        <StyledGrid item xs={1} sm={4} md={8}>\n          <TextFieldMaximumNumberOfRepresentatives />\n        </StyledGrid>\n\n        <StyledBottomGrid item xs={1} sm={4} md={8}>\n          <MintTokenButton />\n        </StyledBottomGrid>\n      </StyledGrid>\n    </InitVoteMarketContextProvider>\n  );\n};\n\nexport default Mint;\n"],"sourceRoot":""}